#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# To enable zyxel-snmp tests, add the "zyxel-snmp" tag to hosts.cfg. place password in snmppasswd file in $XYMONHOME directory
import os
import re
import subprocess
import Hobbit
from collections import defaultdict

username = 'status'
passwordfile = os.path.join(os.environ.get('XYMONHOME', ''), 'etc', 'snmppasswd')

class VB:
    def __init__(self, tag, iid, type, val):
        self.tag = tag
        self.iid = iid
        self.type = type.upper()
        self.val = val

def get_password(host, username, passfile):
    with open(passfile) as f:
        for line in f.read().splitlines():
            parts = line.split(':')
            if parts[0:2] == [host, username]:
                return parts[2]
    return ''

def fetch_snmp_values(ip, host, username, password, queries):
    out = []
    for query in queries:
        walk = subprocess.Popen('snmpwalk -Oe -v3 -l authNoPriv -u %s -a SHA -A "%s" %s %s' % (username, password, ip, query),
            shell=True, stdout=subprocess.PIPE)
        vbs = []
        for line in walk.stdout:
            m = re.match(r"(.*)::(.*)\.(\d+) = (.*): (.*)", line.decode())
            print(line.decode())
            if not m:
#                print("ERROR: no match line: %s" % line)
                continue
            (name, idx, type, val) = (m.group(2), m.group(3), m.group(4), m.group(5))
            vbs.append(VB(name, idx, type, val))
        out += vbs
    return out


def split_snmp_name(name, props):
    for prop in props:
        if prop in name:
            return (name.replace(prop, ''), prop)
    return (name, None)

def parse_snmp_values(values, prefix, props):
    types = {
        'OCTETSTR': str,
        'INTEGER': int,
    }
    ret = defaultdict(dict)
    for vb in values:
        name = vb.tag.replace(prefix, '')
        name, prop = split_snmp_name(name, props)
        if prop:
            prop = prop[0].lower() + prop[1:]
        type = name.lower()
        name += vb.iid
        ret[name][prop] = types.get(vb.type, str)(vb.val)
        ret[name]['type'] = type
    return ret

def monitor_switch(ip, host):
    password = get_password(host, username, passwordfile)

    # TODO: add other colors (default is red)
    status_colors = {
        'normal': 'green',
    }

    factors = {
        'voltage': 0.001,
    }

    units = {
        'temperature': '&deg;C',
        'fanrpm': 'RPM',
        'voltage': 'V',
    }

    prefix = {
        'temperature': 'temp',
    }

    values = fetch_snmp_values(ip, host, username, password, ['ZYXEL-ES-SMI::esMgmt.26'])

    bb = Hobbit.Hobbit(test='temp', hostname=host)
    trends = Hobbit.trends(hostname=host)

    if not values:
        bb.color_line('red', 'Error reading SNMP values from device.')
        bb.send()
        return

    sensors = parse_snmp_values(values, 'zyHwMonitor', ['LowThreshold', 'HighThreshold', 'NominalValue', 'CurrentValue', 'Status', 'MaxValue', 'MinValue', 'Description'])

    for name,data in sensors.items():
        datatype = data['type']
        data['currentValue'] *= factors.get(datatype, 1.0)
        bb.color_line(status_colors.get(data['status'].lower(), 'red'), '%s: %g %s' % (data['description'], data['currentValue'], units[datatype]))

        trends.lineprint("[%s,%s.rrd]" % (prefix.get(datatype, datatype), data['description']));
        trends.lineprint("DS:%s:GAUGE:600:U:U %f" % (prefix.get(datatype, datatype), data['currentValue']));

    bb.send()
    trends.send()

hosts = subprocess.Popen('xymongrep --noextras zyxel-snmp', shell=True, stdout=subprocess.PIPE)
for line in hosts.stdout:
    ip, host = line.decode().split(' ')[:2]
    monitor_switch(ip, host)
