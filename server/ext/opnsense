#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# To enable opnsense tests, add the "opnsense" tag to hosts.cfg. place password in opnsensepasswd file in $XYMONHOME directory
import os
import logging
import time
import subprocess
import requests
import sseclient
import json
from bs4 import BeautifulSoup
import Hobbit
from xymon_utils import cache as xymon_cache

logging.basicConfig()
logger = logging.getLogger()
#logger.setLevel(logging.DEBUG)

username = 'status'
passwordfile = os.path.join(os.environ.get('XYMONHOME', '/usr/lib/xymon/server'), 'etc', 'opnsensepasswd')

def get_password(host, username, passfile):
    with open(passfile) as f:
        for line in f.read().splitlines():
            parts = line.split(':')
            if parts[0:2] == [host, username]:
                return parts[2:5]
    return ()

@xymon_cache('fwstatus', 3600)
def firmware_status(host, api):
    # trigger check
    r = api.post('https://%s/api/core/firmware/check' % host)
    if not r.ok or r.json()['status'] != 'ok':
        return None
    # wait 30 x 1sec cycles for check to end
    for wait in range(30):
        time.sleep(1)
        logger.debug("checking...")
        r = api.get('https://%s/api/core/firmware/upgradestatus' % host)
        if r.ok and r.json()['status'] == 'done':
            break
    if not r.ok or r.json()['status'] != 'done':
        return None
    # get final status
    r = api.get('https://%s/api/core/firmware/status' % host)
    if not r.ok:
        return None

    return r.json()

def interfaces_info(host, api):
    r = api.get('https://%s/api/interfaces/overview/interfacesInfo/1' % host)
    if not r.ok:
        return None
    return r.json()['rows']

def web_auth(wapi, host, username, password):
    # fetch index to get CSRF token
    r = wapi.get('https://%s/' % host)
    if r.status_code != 200:
        return False

    soup = BeautifulSoup(r.text, 'lxml')

    token=soup.find('input', type='hidden')

    # login
    r = wapi.post(
        'https://%s/' % host,
        data={
            'login': 1,
            'passwordfld': password,
            'usernamefld': username,
            token['name']: token['value']
        }
    )
    if r.status_code != 200:
        return False

    return True

def check_updates(host, api):

    fwstatus = firmware_status(host, api)

    bb = Hobbit.Hobbit(test='opn', hostname=host)
    if fwstatus is None:
        bb.color_line('red', 'Error reading firmware status')
        bb.send()
        return

    if 'There are no updates available' in fwstatus['status_msg']:
        bb.add_color('green')
    else:
        bb.add_color('red')

    bb.lineprint(fwstatus['status_msg'])

    bb.lineprint("Last check: %s" % fwstatus['last_check'])

    bb.send()

def percent_used(data, usedname='used', totalname='total'):
    return 100. * float(data[usedname]) / float(data[totalname])

def size_to_bytes(value):
    unit = value[-1]
    value = float(value[:-1])
    if unit == 'T':
        return value * 1024 * 1024 * 1024 * 1024
    if unit == 'G':
        return value * 1024 * 1024 * 1024
    if unit == 'M':
        return value * 1024 * 1024
    if unit == 'K':
        return value * 1024

def monitor_firewall(ip, host):
    (password, key, secret) = get_password(host, username, passwordfile)

    api = requests.session()
    api.auth = (key, secret)

    check_updates(host, api)

    def get_api(path, stream=False, headers={}):
        if stream:
            headers['Accept'] = 'text/event-stream'
        r = api.get('https://%s/api/%s' % (host, path), stream=stream, headers=headers)
        if r.status_code != 200:
            print('ERROR: API request failed: ' + path)
            return None
        if stream:
            client = sseclient.SSEClient(r)
            # wait some sec for stream to "stabilize"
            # this is mostly for CPU stats
            n = 0
            for event in client.events():
                n += 1
                if n > 5:
                    client.close()
                    return json.loads(event.data)
        else:
            return r.json()

    client = Hobbit.Hobbit(test='freebsd', type='client', hostname=host.replace('.', ','));

    data = get_api('diagnostics/system/systemInformation')
    client.lineprint('[osversion]')
    for line in data['versions']:
        client.lineprint(line)
    data = get_api('diagnostics/system/systemTime')
    client.lineprint('[date]')
    client.lineprint(data['datetime'])
    client.lineprint('[uptime]')
    client.lineprint(data['uptime'])
    client.send()

    trends = Hobbit.trends(hostname=host)
#    trends.lineprint("[la.rrd]")
#    trends.lineprint("DS:la:GAUGE:600:U:U %g" % (100. * float(data['system']['cpu']['load'][1])))

    data = get_api('diagnostics/cpu_usage/stream', stream=True)
    trends.lineprint("[vmstat.rrd]")
    trends.lineprint("DS:cpu_sys:GAUGE:600:0:U %g" % float(data['sys']))
    trends.lineprint("DS:cpu_usr:GAUGE:600:0:U %g" % (float(data['user'])+float(data['nice'])))
    trends.lineprint("DS:cpu_idl:GAUGE:600:0:U %g" % float(data['idle']))
    trends.lineprint("DS:cpu_int:GAUGE:600:0:U %g" % float(data['intr']))
    trends.lineprint("DS:cpu_wait:GAUGE:600:0:U U")

    data = get_api('diagnostics/system/systemResources')
    trends.lineprint("[memory.actual.rrd]")
    trends.lineprint("DS:realmempct:GAUGE:600:0:U %g" % percent_used(data['memory']))
    trends.lineprint("[memory.real.rrd]")
    trends.lineprint("DS:realmempct:GAUGE:600:0:U U")

#    data = get_api('diagnostics/system/systemSwap')
#    trends.lineprint("[memory.swap.rrd]")
#    if data['system']['disk']['swap']:
#        trends.lineprint("DS:realmempct:GAUGE:600:0:U %g" % percent_used(data['system']['disk']['swap']))
#    else:
#        trends.lineprint("DS:realmempct:GAUGE:600:0:U U")

    data = get_api('diagnostics/firewall/pfStates')
    trends.lineprint("[states.rrd]")
    trends.lineprint("DS:used:GAUGE:600:U:U %d" % int(data['current']))
    trends.lineprint("DS:max:GAUGE:600:U:U %d" % int(data['limit']))
    trends.lineprint("DS:usedpct:GAUGE:600:U:U %g" % percent_used(data, 'current', 'limit'))

#    data = get_api('diagnostics/system/systemMbuf')
#    trends.lineprint("[mbuf.rrd]")
#    trends.lineprint("DS:used:GAUGE:600:U:U %d" % int(data['mbuf-statistics']['mbuf-current']))
#    trends.lineprint("DS:max:GAUGE:600:U:U %d" % int(data['mbuf-statistics']['mbuf-total']))
#    trends.lineprint("DS:usedpct:GAUGE:600:U:U %g" % percent_used(data['mbuf-statistics'], 'mbuf-current', 'mbuf-total'))

    data = get_api('diagnostics/system/systemDisk')
    for disk in data['devices']:
        name = disk['mountpoint'][1:] or 'root'
        size = size_to_bytes(disk['available'])
        used = size_to_bytes(disk['used'])
        trends.lineprint("[disk,%s.rrd]" % name)
        trends.lineprint("DS:pct:GAUGE:600:0:100 %g" % (100. * used / size))
        trends.lineprint("DS:used:GAUGE:600:0:U %d" % used)

    data = get_api('diagnostics/system/systemTemperature')
    for temp in data:
        trends.lineprint("[temp,%s.rrd]" % temp['device'].replace('.', '_'))
        trends.lineprint("DS:temp:GAUGE:600:U:U %g" % float(temp['temperature']))

#    data = get_api('diagnostics/interface/getInterfaceStatistics')
    interfaces = interfaces_info(host, api)
    for intf in interfaces:
        if 'config' not in intf:
            continue
        name = intf['config']['descr']
        trends.lineprint("[ifstat,%s.rrd]" % name)
        trends.lineprint("DS:bytesReceived:DERIVE:600:0:U %d" % int(intf['statistics']['bytes received']))
        trends.lineprint("DS:bytesSent:DERIVE:600:0:U %d" % int(intf['statistics']['bytes transmitted']))

    trends.send()

hosts = subprocess.Popen('xymongrep --noextras opnsense', shell=True, stdout=subprocess.PIPE)
for line in hosts.stdout:
    ip, host = str(line).split(' ')[:2]
    monitor_firewall(ip, host)
